-- Create a table named Analytics listing ageneral information for videos under a channel
CREATE TABLE Analytics (
    Video_ID INT PRIMARY KEY,
    Title VARCHAR(50) NOT NULL,
    Upload_Date DATE NOT NULL,
    Duration_Seconds INT,
    Duration_Minutes INT
);

-- Rename table Analytics to Video_Info
EXEC sp_rename 'Analytics', 'Video_Info';

-- Create another table named Performance_Metrics
CREATE TABLE Performance_Metrics (
    Video_ID INT PRIMARY KEY,
    Views INT NOT NULL,
    Watch_Time_Minutes FLOAT NOT NULL,
    Avg_View_Duration_Seconds FLOAT,
    Likes INT NOT NULL,
    Dislikes INT NOT NULL
);

-- Add 2 columns to the Performance_Metrics Table
ALTER TABLE Performance_Metrics
ADD Comments_Count INT,
ADD Shares INT;

-- Remove column from Video_Info table
ALTER TABLE Video_Info
DROP COLUMN Duration_Minutes;

-- Add 1 column to the Performance_Metrics Table
ALTER TABLE Video_Info
ADD Category VARCHAR(50);

-- Insert values into Video_Info table 
INSERT INTO Video_Info (Video_ID, Title, Upload_Date, Duration_Seconds, Category) VALUES 
(1,'10 Minute Morning Yoga Routine','2025-09-09',600,'Health & Fitness'),
(2,'Top 10 Coding Tips','2025-09-11',720,'Education'),
(3,'Travel Vlog in Shibuya, Japan','2025-09-14',900,'Travel'),
(4,'Minimalistic DIY Room Decor','2025-09-14',480,'Lifestyle'),
(5,'Valorant Gaming Montage','2025-09-15',1080,'Gaming'),
(6,'History of Rome Explained','2025-09-17',1200,'Education'),
(7,'Street Food in Manila','2025-09-19',540,'Food'),
(8,'Music Cover of Hello by Adele','2025-09-23',210,'Music'),
(9,'25 Productivity Hacks for 2025','2025-09-26',660,'Lifestyle'),
(10,'Movie Review: Dune 2','2025-09-27',780,'Entertainment');

-- Insert values into Performance_Metrics table 
INSERT INTO Performance_Metrics (Video_ID, Views, Watch_Time_Minutes, Avg_View_Duration_Seconds, Likes, Dislikes) VALUES 
(1,50000,8200,590,3500,120),
(2,72000,11400,570,4200,180),
(3,95000,15700,595,6800,210),
(4,30000,4800,580,2100,60),
(5,150000,28000,660,12000,500),
(6,40000,6300,550,3300,100),
(7,80000,13400,600,5600,160),
(8,20000,2500,450,1800,50),
(9,55000,9000,500,4100,90),
(10,68000,12100,640,5500,230);

-- Calculate the like-dislike ratio per video and show it

-- Add another table named Audience
CREATE TABLE Audience (
    Video_ID INT PRIMARY KEY,
    Subscribers_Gained INT,
    Subscribers_Lost INT,
    Audience_Retention_Rate INT,
    Click_Through_Rate INT
);

-- Insert values into Audience table 
INSERT INTO Audience (Video_ID, Subscribers_Gained, Subscribers_Lost, Audience_Retention_Rate, Click_Through_Rate) VALUES 
(1, 115, 6, 37.7, 49),
(2, 240, 15, 42.3, 55),
(3, 310, 12, 48.9, 61),
(4, 95, 4, 33.5, 47),
(5, 520, 25, 51.2, 63),
(6, 180, 10, 39.1, 50),
(7, 270, 8, 45.7, 58),
(8, 75, 3, 29.4, 44),
(9, 210, 9, 41.8, 52),
(10, 260, 14, 46.5, 59);
    
-- Select everything from the Video_Info table
SELECT * 
FROM Video_Info;

-- Arrange all videos in Video_Info by alphabetical order
SELECT *
FROM Orders
ORDER BY Title ASC;

-- Select everything from the Performance_Metrics table
SELECT * 
FROM Performance_Metrics;

-- List all details in the Video_Info table combined with the views, likes and dislikes from Performance_Metrics
SELECT 
    v.Video_ID,
    v.Title,
    v.Upload_Date,
    v.Duration_Seconds,
    p.Views,
    p.Likes,
    p.Dislikes
FROM Video_Info v
JOIN Performance_Metrics p
    ON v.Video_ID = p.Video_ID

-- Update the Video_Info table to add a new video
INSERT INTO Video_Info (Video_ID, Title, Upload_Date, Duration_Seconds, Category) VALUES 
('11','---','2025-09-14','510','Lifestyle');

-- Update the Performance_Metrics table to add a new value
INSERT INTO Performance_Metrics (Video_ID, Views, Watch_Time_Minutes, Avg_View_Duration_Seconds, Likes, Dislikes) VALUES 
('11','87000','7500','550','3800','490');

-- Update the Audience table to add a new value
INSERT INTO Audience (Video_ID, Views, Watch_Time_Minutes, Avg_View_Duration_Seconds, Likes, Dislikes) VALUES 
('11','50000','8200','590','3500','120');

-- Find the top 5 videos with the highest number of views
SELECT TOP 5
    Video_ID, 
    COUNT(*) AS Video_Count
FROM Performance_Metrics
GROUP BY Video_ID
ORDER BY Views DESC

-- Show all videos made on September 14, 2025
SELECT *
FROM Video_Info
WHERE Upload_Date = '2025-09-14'

-- Find the total number of views generated by all 10 videos
    -- (Needs to be checked)
SELECT * 
    SUM(Views) AS Total_Views
FROM Performance_Metrics 

-- Show the number of subscribers gained and lost from Lifestyle videos
SELECT *
    v.Video_ID,
    v.Title,
    v.Upload_Date,
    a.Subscribers_Gained
    a.Subscribers_Lost
FROM Video_Info v
JOIN Audience a
    ON v.Video_ID = a.Video_ID

-- Find the top 5 videos based on number of likes
    ...
SELECT TOP 5
    Video_ID, 
    COUNT(*) AS Video_Count
FROM Performance_Metrics
GROUP BY Video_ID
ORDER BY Likes DESC;

-- Create view of all videos in descending amount of views
...
CREATE VIEW Videos_By_Views AS
SELECT 
    v.Video_ID,
    v.Title,
    v.Upload_Date,
    v.Duration_Seconds,
    p.Views,
    p.Likes,
    p.Dislikes
FROM Video_Info v
JOIN Performance_Metrics p
ON v.Video_ID = p.Video_ID
ORDER BY p.Views DESC;

-- Create a view of all videos in descending like-dislike ratios
CREATE VIEW Videos_By_Like_Dislike_Ratios AS
SELECT 
    v.Video_ID,
    v.Title,
    v.Upload_Date,
    v.Duration_Seconds,
    p.Views,
    p.Likes,
    p.Dislikes,
    p.Likes / p.Dislikes AS LTD_Ratio
FROM Video_Info v
JOIN Performance_Metrics p
ON v.Video_ID = p.Video_ID
ORDER BY LTD_Ratio DESC;

-- Show all videos in ascending views-to-watch duration ratio
...
SELECT 
    v.Video_ID,
    v.Title,
    v.Upload_Date,
    v.Duration_Seconds,
    p.Views,
    p.Watch_Time_Minutes,
    p.Views / p.Watch_Time_Minutes AS VTW_Ratio
FROM Video_Info v
JOIN Performance_Metrics p
ON v.Video_ID = p.Video_ID
ORDER BY VTW_Ratio DESC;

